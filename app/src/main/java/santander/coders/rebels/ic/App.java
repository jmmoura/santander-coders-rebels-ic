/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package santander.coders.rebels.ic;

import jakarta.validation.ConstraintViolation;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.ValidatorFactory;
import santander.coders.rebels.ic.domain.IC;
import santander.coders.rebels.ic.domain.Rebel;
import santander.coders.rebels.ic.enums.RaceKind;

import java.util.Scanner;
import java.util.Set;

public class App {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        IC ic = new IC();

        System.out.println("Bem-vindo à Inteligência Central dos Rebeldes!");
        System.out.println("Insira as inforações dos aspirantes a novos Rebeldes.");

        boolean wantAddNewAspirant = true;
        while (wantAddNewAspirant) {
            System.out.println("Informe o nome: ");
            String name = scanner.nextLine();

            System.out.println("Informe a idade: ");
            int age = scanner.nextInt();

            int raceKind;
            do {
                System.out.println("Informe a raça: ");
                for (RaceKind item : RaceKind.values()) {
                    System.out.printf("%d - %s%n", item.ordinal(), item.getDescription());
                }
                raceKind = scanner.nextInt();

                boolean invalidEntry = raceKind < 0 || raceKind >= RaceKind.values().length;
                if (invalidEntry) {
                    System.err.println("O valor da raça deve estar entre 0 e 2!");
                } else {
                    break;
                }
            } while (true);

            Rebel rebel = new Rebel(name, age, RaceKind.values()[raceKind]);

            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            Validator validator = factory.getValidator();
            Set<ConstraintViolation<Rebel>> constraintViolations = validator.validate(rebel);

            constraintViolations.forEach(x -> System.err.println(x.getMessage()));

            if (!constraintViolations.isEmpty()) {
                scanner.nextLine();
                continue;
            }

            ic.askIngress(rebel);

            System.out.println("Insira S para informar mais um aspirante. Insira qualquer outra letra para encerrar.");
            char addNewAspirant = scanner.next().charAt(0);
            scanner.nextLine();

            wantAddNewAspirant = addNewAspirant == 'S' || addNewAspirant == 's';
        }

        ic.printRebelsToConsole();
        ic.printRebelsToFile();

    }
}
