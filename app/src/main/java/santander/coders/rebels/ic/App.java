/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package santander.coders.rebels.ic;

import jakarta.validation.ConstraintViolation;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.ValidatorFactory;
import santander.coders.rebels.ic.controller.IC;
import santander.coders.rebels.ic.domain.Rebel;
import santander.coders.rebels.ic.enums.RaceKind;
import santander.coders.rebels.ic.utils.Utils;

import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.Set;

public class App {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        IC ic = new IC();

        System.out.println("Bem-vindo à Inteligência Central dos Rebeldes!");
        System.out.println("Insira as inforações dos aspirantes a novos Rebeldes.");

        boolean wantAddNewAspirant = true;
        while (wantAddNewAspirant) {
            Rebel rebel = ic.askNewRebel();

            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            Validator validator = factory.getValidator();
            Set<ConstraintViolation<Rebel>> constraintViolations = validator.validate(rebel);

            constraintViolations.forEach(x -> System.err.println(x.getMessage()));

            if (!constraintViolations.isEmpty()) {
                continue;
            }

            ic.askIngress(rebel);

            System.out.println("Insira S para informar mais um aspirante. Insira qualquer outra letra para encerrar.");
            char addNewAspirant = scanner.next().charAt(0);

            wantAddNewAspirant = addNewAspirant == 'S' || addNewAspirant == 's';
        }

        String printOrder = ic.askPrintOrder();

        List<Rebel> rebelList = ic.getRebels();
        Rebel[] rebelsArray = rebelList.toArray(new Rebel[rebelList.size()]);
        Rebel[] rebelArrayOrdered;
        switch (printOrder) {
            case "Nome":
                rebelArrayOrdered = Utils.selectionSortByName(rebelsArray);
                ic.setRebels(Arrays.asList(rebelArrayOrdered));
                break;
            case "Idade":
                rebelArrayOrdered = Utils.selectionSortByAge(rebelsArray);
                ic.setRebels(Arrays.asList(rebelArrayOrdered));
                break;
            case "Raça":
                rebelArrayOrdered = Utils.selectionSortByRaceKind(rebelsArray);
                ic.setRebels(Arrays.asList(rebelArrayOrdered));
                break;
        }

        ic.printRebelsToConsole();
        ic.printRebelsToFile();

    }
}
